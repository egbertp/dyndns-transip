# This is a basic workflow to help you get started with Actions
name: build

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
    - master
    - staging
    - develop
  pull_request:
    branches:
    - master
    - staging
    - develop

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # The "build" workflow
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    
    # Setup Go
    - name: Setup Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.15.5' # The Go version to download (if necessary) and use.
    
    # Install all the dependencies
    - name: Install dependencies
      run: |
        go version
        go get -u golang.org/x/lint/golint
        go get -u github.com/mitchellh/gox
          
    # Run vet & lint on the code
    - name: Run vet & lint
      run: |
        go vet cmd/.
        golint cmd/.
    
    # # Run testing on the code
    # - name: Run testing
    #   run: cd test && go test -v

    # Run build of the application
    - name: Run build
      run: ./release.sh

    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        path: 
          dist/ # or path/to/artifact
          # '!dist/.gitkeep'
        if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn` 

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: true
      
    - name: Upload Release Asset
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./dist    
      
    # # Send slack notification
    # - name: Send slack notification
    #   uses: 8398a7/action-slack@v3
    #   with:
    #     status: ${{ job.status }}
    #     fields: repo,message,commit,author,action,eventName,ref,workflow,job,took # selectable (default: repo,message)
    #   env:
    #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
    #   if: always() # Pick up events even if the job fails or is canceled.

  # # The "deploy" workflow
  # deploy:
  #   # The type of runner that the job will run on
  #   runs-on: ubuntu-latest
  #   needs: [build] # Only run this workflow when "build" workflow succeeds
  #   if: ${{ github.ref == 'refs/heads/master' && github.event_name == 'push' }} # Only run this workflow if it is master branch on push event
  #   steps:
  #   - uses: actions/checkout@v2
    
  #   - uses: actions/upload-artifact@v2
  #     with:
  #       path: dist/ # or path/to/artifact
  #       if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn` 


# on: [push, pull_request]
# name: Test
# jobs:
#   test:
#     strategy:
#       matrix:
#         go-version: [1.14.x, 1.15.x]
#         os: [ubuntu-latest, macos-latest, windows-latest]
#     runs-on: ${{ matrix.os }}
#     steps:
#     - name: Install Go
#       uses: actions/setup-go@v2
#       with:
#         go-version: ${{ matrix.go-version }}
#     - name: Checkout code
#       uses: actions/checkout@v2
#     - name: Test
#       run: go test ./...

#   # test-cache:
#   #   runs-on: ubuntu-latest
#   #   steps:
#   #   - name: Install Go
#   #     uses: actions/setup-go@v2
#   #     with:
#   #       go-version: 1.15.x
#   #   - name: Checkout code
#   #     uses: actions/checkout@v2
#   #   - uses: actions/cache@v2
#   #     with:
#   #       path: |
#   #         ~/go/pkg/mod              # Module download cache
#   #         ~/.cache/go-build         # Build cache (Linux)
#   #         ~/Library/Caches/go-build # Build cache (Mac)
#   #         '%LocalAppData%\go-build' # Build cache (Windows)
#   #       key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
#   #       restore-keys: |
#   #         ${{ runner.os }}-go-
#   #   - name: Test
#   #     run: go test ./...